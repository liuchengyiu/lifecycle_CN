import pandas as pd
import numpy as np
from lib import GMM
from datasets import DataSet
from sklearn.preprocessing import PolynomialFeatures
import joblib
import copy 
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from pylab import mpl
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from pylab import mpl
import seaborn as sns
import time

np.random.seed(0)
param = [0.793809, 0.925428, 0.232455, -0.687735, 0.120065, 0.714885, 0.002731] # generated by the matlab code in smm directory.
p = {
    'transitory_shock': [0, param[0]],
    'persistent_param': param[1],
    'p1': param[2],
    'gmm_mu_1': param[3],
    'gmm_mu_2': param[4],
    'gmm_std_1': param[5],
    'gmm_std_2': param[6],
}
income_part = {
    'deterministic_model': joblib.load('./datasets/model/income.pkl'),
    'feature_trans': PolynomialFeatures(degree=3),
    'stochastic_param': p,
    'gmm': GMM(p),
    'last_permanent_shock': 0,
    'age': 25,
    'retire_age': 60
}

def evlove_income(income_part):
    def gen_shock():
        income_part['last_permanent_shock'] = \
            income_part['stochastic_param']['persistent_param'] * income_part['last_permanent_shock'] + income_part['gmm'].sample()
        return income_part['last_permanent_shock'] + \
            np.random.normal(income_part['stochastic_param']['transitory_shock'][0], income_part['stochastic_param']['transitory_shock'][1])
    if income_part['age'] < income_part['retire_age']:
        income_part['demographic_features'][0] = income_part['age']
        main_part = np.abs(income_part['deterministic_model'].predict(income_part['feature_trans'].fit_transform([income_part['demographic_features']])))
        income = abs((main_part * np.exp(gen_shock()))[0])
        income_part['last_permanent_shock'] = \
            income_part['stochastic_param']['persistent_param'] * income_part['last_permanent_shock'] + income_part['gmm'].sample()
    return income

def plot(data, index):
    sns.set(style="darkgrid", font_scale=1.5)
    keys = data.keys()
    y = list(range(25, 60))
    for key in keys:
        plt.plot(y, data[key], label=key, linewidth=1)
    # font1 = {'family': 'Times New Roman', 'weight': 'normal', 'size': 10}
    plt.xlabel('age')
    plt.ylabel('amount')
    plt.legend(loc=4)
    plt.savefig('./figures/{}.png'.format(index), dpi=200, bbox_inches='tight')
    plt.clf()

ps = pd.read_csv('./datasets/data/ind_profile.csv').values[:, :-1]
print(list(ps[25262]))
exit(0)
nums = list(range(len(ps)))
index = 1
times = 500
size = 1
while 1:
    res = {}
    ds = np.random.choice(nums, size=size) 
    # ds = [10868]
    for num in ds:
        res[num] = np.zeros(60-25)
        for _ in range(times):        
            ip = copy.deepcopy(income_part)
            ip['demographic_features'] = ps[num]
            while ip['age'] < ip['retire_age']:
                res[num][ip['age']-25] += evlove_income(income_part=ip)
                ip['age'] += 1
        res[num] /= (times)
    # res = {'average': res}
    plot(res, index)
    # break
    index += 1